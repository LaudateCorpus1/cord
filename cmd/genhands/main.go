package main

import (
	"fmt"
	"log"
	"os"
	"strings"
	"text/template"
	"unicode"
)

const (
	usage  = "Usage: genhands PACKET1=Packet1Struct [PACKET2=Packet2Struct ...]"
	output = "handlers.go"
	tmpl   = `// AUTOGENERATED FILE, DO NOT EDIT
package cord

import "github.com/WatchBeam/cord/model"

{{ range . }}
// {{ .Struct }} is a handler for {{ .Event }} events.
type {{ .Struct }} func(update *model.{{ .Model }})

var _ Handler = {{ .Struct }}(func (m *model.{{ .Model }}) {})

// Name implements Handler.Name
func (p {{ .Struct }}) Name() string { return "{{ .Event }}" }

// Invoke implements Handler.Invoke
func (p {{ .Struct }}) Invoke(b []byte) error {
    data := &model.{{ .Model }}{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}
{{end}}
`
)

func snakeToCamel(s string) string {
	var result string

	words := strings.Split(strings.ToLower(s), "_")

	for _, word := range words {
		w := []rune(word)
		w[0] = unicode.ToUpper(w[0])
		result += string(w)
	}

	return result
}

type Handler struct {
	Event  string
	Struct string
	Model  string
}

func main() {
	if len(os.Args) == 1 {
		fmt.Println(usage)
		os.Exit(1)
	}

	f, err := os.Create(output)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	data := []Handler{}
	for _, str := range os.Args[1:] {
		strs := strings.Split(str, "=")
		data = append(data, Handler{
			Event:  strs[0],
			Model:  strs[1],
			Struct: snakeToCamel(strs[0]),
		})
	}

	t := template.Must(template.New("handlers").Parse(tmpl))
	if err := t.Execute(f, data); err != nil {
		log.Fatal(err)
	}

}
