// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package cord

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

var _ = json.RawMessage{} // suppress unused package warning

func easyjson_ea487e79_decode_github_com_WatchBeam_cord_gatewayResponse(in *jlexer.Lexer, out *gatewayResponse) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_ea487e79_encode_github_com_WatchBeam_cord_gatewayResponse(out *jwriter.Writer, in gatewayResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"url\":")
	out.String(string(in.URL))
	out.RawByte('}')
}
func (v gatewayResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_ea487e79_encode_github_com_WatchBeam_cord_gatewayResponse(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v gatewayResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_ea487e79_encode_github_com_WatchBeam_cord_gatewayResponse(w, v)
}
func (v *gatewayResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_ea487e79_decode_github_com_WatchBeam_cord_gatewayResponse(&r, v)
	return r.Error()
}
func (v *gatewayResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_ea487e79_decode_github_com_WatchBeam_cord_gatewayResponse(l, v)
}
func easyjson_ea487e79_decode_github_com_WatchBeam_cord_Payload(in *jlexer.Lexer, out *Payload) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Operation = Operation(in.Uint8())
		case "d":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		case "s":
			out.Sequence = uint64(in.Uint64())
		case "t":
			out.Event = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_ea487e79_encode_github_com_WatchBeam_cord_Payload(out *jwriter.Writer, in Payload) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"op\":")
	out.Uint8(uint8(in.Operation))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"d\":")
	out.Raw((in.Data).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"s\":")
	out.Uint64(uint64(in.Sequence))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"t\":")
	out.String(string(in.Event))
	out.RawByte('}')
}
func (v Payload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_ea487e79_encode_github_com_WatchBeam_cord_Payload(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Payload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_ea487e79_encode_github_com_WatchBeam_cord_Payload(w, v)
}
func (v *Payload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_ea487e79_decode_github_com_WatchBeam_cord_Payload(&r, v)
	return r.Error()
}
func (v *Payload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_ea487e79_decode_github_com_WatchBeam_cord_Payload(l, v)
}
