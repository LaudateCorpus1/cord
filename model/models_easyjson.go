// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package model

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

var _ = json.RawMessage{} // suppress unused package warning

func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_HandshakeProperties(in *jlexer.Lexer, out *HandshakeProperties) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "$os":
			out.OS = string(in.String())
		case "$browser":
			out.Browser = string(in.String())
		case "$device":
			out.Device = string(in.String())
		case "$referer":
			out.Referer = string(in.String())
		case "$referring_domain":
			out.ReferringDomain = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_HandshakeProperties(out *jwriter.Writer, in HandshakeProperties) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"$os\":")
	out.String(string(in.OS))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"$browser\":")
	out.String(string(in.Browser))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"$device\":")
	out.String(string(in.Device))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"$referer\":")
	out.String(string(in.Referer))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"$referring_domain\":")
	out.String(string(in.ReferringDomain))
	out.RawByte('}')
}
func (v HandshakeProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_HandshakeProperties(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v HandshakeProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_HandshakeProperties(w, v)
}
func (v *HandshakeProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_HandshakeProperties(&r, v)
	return r.Error()
}
func (v *HandshakeProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_HandshakeProperties(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Handshake(in *jlexer.Lexer, out *Handshake) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "properties":
			(out.Properties).UnmarshalEasyJSON(in)
		case "compress":
			out.Compress = bool(in.Bool())
		case "large_threshold":
			out.LargeThreshold = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Handshake(out *jwriter.Writer, in Handshake) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"token\":")
	out.String(string(in.Token))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"properties\":")
	(in.Properties).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"compress\":")
	out.Bool(bool(in.Compress))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"large_threshold\":")
	out.Int(int(in.LargeThreshold))
	out.RawByte('}')
}
func (v Handshake) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Handshake(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Handshake) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Handshake(w, v)
}
func (v *Handshake) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Handshake(&r, v)
	return r.Error()
}
func (v *Handshake) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Handshake(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Resume(in *jlexer.Lexer, out *Resume) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "session_id":
			out.SessionID = string(in.String())
		case "seq":
			out.Sequence = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Resume(out *jwriter.Writer, in Resume) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"token\":")
	out.String(string(in.Token))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"session_id\":")
	out.String(string(in.SessionID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"seq\":")
	out.Uint64(uint64(in.Sequence))
	out.RawByte('}')
}
func (v Resume) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Resume(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Resume) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Resume(w, v)
}
func (v *Resume) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Resume(&r, v)
	return r.Error()
}
func (v *Resume) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Resume(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_VoiceServerUpdate(in *jlexer.Lexer, out *VoiceServerUpdate) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "guild_id":
			out.GuildID = string(in.String())
		case "endpoint":
			out.Endpoint = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_VoiceServerUpdate(out *jwriter.Writer, in VoiceServerUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"token\":")
	out.String(string(in.Token))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"guild_id\":")
	out.String(string(in.GuildID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"endpoint\":")
	out.String(string(in.Endpoint))
	out.RawByte('}')
}
func (v VoiceServerUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_VoiceServerUpdate(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v VoiceServerUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_VoiceServerUpdate(w, v)
}
func (v *VoiceServerUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_VoiceServerUpdate(&r, v)
	return r.Error()
}
func (v *VoiceServerUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_VoiceServerUpdate(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Embed(in *jlexer.Lexer, out *Embed) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "thumbnail":
			if in.IsNull() {
				in.Skip()
				out.Thumbnail = nil
			} else {
				out.Thumbnail = new(struct {
					URL      string "json:\"url\""
					ProxyURL string "json:\"proxy_url\""
					Width    int    "json:\"width\""
					Height   int    "json:\"height\""
				})
				easyjson_d2b7633e_decode_anonymous(in, &*out.Thumbnail)
			}
		case "provider":
			if in.IsNull() {
				in.Skip()
				out.Provider = nil
			} else {
				out.Provider = new(struct {
					URL  string "json:\"url\""
					Name string "json:\"name\""
				})
				easyjson_d2b7633e_decode_anonymous1(in, &*out.Provider)
			}
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				out.Author = new(struct {
					URL  string "json:\"url\""
					Name string "json:\"name\""
				})
				easyjson_d2b7633e_decode_anonymous1(in, &*out.Author)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				out.Video = new(struct {
					URL    string "json:\"url\""
					Width  int    "json:\"width\""
					Height int    "json:\"height\""
				})
				easyjson_d2b7633e_decode_anonymous2(in, &*out.Video)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Embed(out *jwriter.Writer, in Embed) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"url\":")
	out.String(string(in.URL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"title\":")
	out.String(string(in.Title))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"description\":")
	out.String(string(in.Description))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"thumbnail\":")
	if in.Thumbnail == nil {
		out.RawString("null")
	} else {
		easyjson_d2b7633e_encode_anonymous(out, *in.Thumbnail)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"provider\":")
	if in.Provider == nil {
		out.RawString("null")
	} else {
		easyjson_d2b7633e_encode_anonymous1(out, *in.Provider)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"author\":")
	if in.Author == nil {
		out.RawString("null")
	} else {
		easyjson_d2b7633e_encode_anonymous1(out, *in.Author)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"video\":")
	if in.Video == nil {
		out.RawString("null")
	} else {
		easyjson_d2b7633e_encode_anonymous2(out, *in.Video)
	}
	out.RawByte('}')
}
func (v Embed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Embed(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Embed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Embed(w, v)
}
func (v *Embed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Embed(&r, v)
	return r.Error()
}
func (v *Embed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Embed(l, v)
}
func easyjson_d2b7633e_decode_anonymous2(in *jlexer.Lexer, out *struct {
	URL    string "json:\"url\""
	Width  int    "json:\"width\""
	Height int    "json:\"height\""
}) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_anonymous2(out *jwriter.Writer, in struct {
	URL    string "json:\"url\""
	Width  int    "json:\"width\""
	Height int    "json:\"height\""
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"url\":")
	out.String(string(in.URL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"width\":")
	out.Int(int(in.Width))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"height\":")
	out.Int(int(in.Height))
	out.RawByte('}')
}
func easyjson_d2b7633e_decode_anonymous1(in *jlexer.Lexer, out *struct {
	URL  string "json:\"url\""
	Name string "json:\"name\""
}) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_anonymous1(out *jwriter.Writer, in struct {
	URL  string "json:\"url\""
	Name string "json:\"name\""
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"url\":")
	out.String(string(in.URL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	out.RawByte('}')
}
func easyjson_d2b7633e_decode_anonymous(in *jlexer.Lexer, out *struct {
	URL      string "json:\"url\""
	ProxyURL string "json:\"proxy_url\""
	Width    int    "json:\"width\""
	Height   int    "json:\"height\""
}) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "proxy_url":
			out.ProxyURL = string(in.String())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_anonymous(out *jwriter.Writer, in struct {
	URL      string "json:\"url\""
	ProxyURL string "json:\"proxy_url\""
	Width    int    "json:\"width\""
	Height   int    "json:\"height\""
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"url\":")
	out.String(string(in.URL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"proxy_url\":")
	out.String(string(in.ProxyURL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"width\":")
	out.Int(int(in.Width))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"height\":")
	out.Int(int(in.Height))
	out.RawByte('}')
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Attachment(in *jlexer.Lexer, out *Attachment) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "proxy_url":
			out.ProxyURL = string(in.String())
		case "filename":
			out.Filename = string(in.String())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Attachment(out *jwriter.Writer, in Attachment) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"url\":")
	out.String(string(in.URL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"proxy_url\":")
	out.String(string(in.ProxyURL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"filename\":")
	out.String(string(in.Filename))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"width\":")
	out.Int(int(in.Width))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"height\":")
	out.Int(int(in.Height))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"size\":")
	out.Int(int(in.Size))
	out.RawByte('}')
}
func (v Attachment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Attachment(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Attachment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Attachment(w, v)
}
func (v *Attachment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Attachment(&r, v)
	return r.Error()
}
func (v *Attachment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Attachment(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Message(in *jlexer.Lexer, out *Message) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "channel_id":
			out.ChannelID = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "timestamp":
			out.Timestamp = string(in.String())
		case "edited_timestamp":
			out.EditedTimestamp = string(in.String())
		case "tts":
			out.Tts = bool(in.Bool())
		case "mention_everyone":
			out.MentionEveryone = bool(in.Bool())
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				out.Author = new(User)
				(*out.Author).UnmarshalEasyJSON(in)
			}
		case "attachments":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Attachments = make([]*Attachment, 0, 8)
			} else {
				out.Attachments = nil
			}
			for !in.IsDelim(']') {
				var v1 *Attachment
				if in.IsNull() {
					in.Skip()
					v1 = nil
				} else {
					v1 = new(Attachment)
					(*v1).UnmarshalEasyJSON(in)
				}
				out.Attachments = append(out.Attachments, v1)
				in.WantComma()
			}
			in.Delim(']')
		case "embeds":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Embeds = make([]*Embed, 0, 8)
			} else {
				out.Embeds = nil
			}
			for !in.IsDelim(']') {
				var v2 *Embed
				if in.IsNull() {
					in.Skip()
					v2 = nil
				} else {
					v2 = new(Embed)
					(*v2).UnmarshalEasyJSON(in)
				}
				out.Embeds = append(out.Embeds, v2)
				in.WantComma()
			}
			in.Delim(']')
		case "mentions":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Mentions = make([]*User, 0, 8)
			} else {
				out.Mentions = nil
			}
			for !in.IsDelim(']') {
				var v3 *User
				if in.IsNull() {
					in.Skip()
					v3 = nil
				} else {
					v3 = new(User)
					(*v3).UnmarshalEasyJSON(in)
				}
				out.Mentions = append(out.Mentions, v3)
				in.WantComma()
			}
			in.Delim(']')
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Message(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel_id\":")
	out.String(string(in.ChannelID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"content\":")
	out.String(string(in.Content))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timestamp\":")
	out.String(string(in.Timestamp))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"edited_timestamp\":")
	out.String(string(in.EditedTimestamp))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tts\":")
	out.Bool(bool(in.Tts))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mention_everyone\":")
	out.Bool(bool(in.MentionEveryone))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"author\":")
	if in.Author == nil {
		out.RawString("null")
	} else {
		(*in.Author).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"attachments\":")
	out.RawByte('[')
	for v4, v5 := range in.Attachments {
		if v4 > 0 {
			out.RawByte(',')
		}
		if v5 == nil {
			out.RawString("null")
		} else {
			(*v5).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"embeds\":")
	out.RawByte('[')
	for v6, v7 := range in.Embeds {
		if v6 > 0 {
			out.RawByte(',')
		}
		if v7 == nil {
			out.RawString("null")
		} else {
			(*v7).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mentions\":")
	out.RawByte('[')
	for v8, v9 := range in.Mentions {
		if v8 > 0 {
			out.RawByte(',')
		}
		if v9 == nil {
			out.RawString("null")
		} else {
			(*v9).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	out.RawByte('}')
}
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Message(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Message(w, v)
}
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Message(&r, v)
	return r.Error()
}
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Message(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_UserGuildSettings(in *jlexer.Lexer, out *UserGuildSettings) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "suppress_everyone":
			out.SupressEveryone = bool(in.Bool())
		case "muted":
			out.Muted = bool(in.Bool())
		case "mobile_push":
			out.MobilePush = bool(in.Bool())
		case "message_notifications":
			out.MessageNotifications = int(in.Int())
		case "guild_id":
			out.GuildID = string(in.String())
		case "channel_overrides":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.ChannelOverrides = make([]*UserGuildSettingsChannelOverride, 0, 8)
			} else {
				out.ChannelOverrides = nil
			}
			for !in.IsDelim(']') {
				var v10 *UserGuildSettingsChannelOverride
				if in.IsNull() {
					in.Skip()
					v10 = nil
				} else {
					v10 = new(UserGuildSettingsChannelOverride)
					(*v10).UnmarshalEasyJSON(in)
				}
				out.ChannelOverrides = append(out.ChannelOverrides, v10)
				in.WantComma()
			}
			in.Delim(']')
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_UserGuildSettings(out *jwriter.Writer, in UserGuildSettings) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"suppress_everyone\":")
	out.Bool(bool(in.SupressEveryone))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"muted\":")
	out.Bool(bool(in.Muted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mobile_push\":")
	out.Bool(bool(in.MobilePush))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message_notifications\":")
	out.Int(int(in.MessageNotifications))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"guild_id\":")
	out.String(string(in.GuildID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel_overrides\":")
	out.RawByte('[')
	for v11, v12 := range in.ChannelOverrides {
		if v11 > 0 {
			out.RawByte(',')
		}
		if v12 == nil {
			out.RawString("null")
		} else {
			(*v12).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	out.RawByte('}')
}
func (v UserGuildSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_UserGuildSettings(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v UserGuildSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_UserGuildSettings(w, v)
}
func (v *UserGuildSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_UserGuildSettings(&r, v)
	return r.Error()
}
func (v *UserGuildSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_UserGuildSettings(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_UserGuildSettingsChannelOverride(in *jlexer.Lexer, out *UserGuildSettingsChannelOverride) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "muted":
			out.Muted = bool(in.Bool())
		case "message_notifications":
			out.MessageNotifications = int(in.Int())
		case "channel_id":
			out.ChannelID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_UserGuildSettingsChannelOverride(out *jwriter.Writer, in UserGuildSettingsChannelOverride) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"muted\":")
	out.Bool(bool(in.Muted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message_notifications\":")
	out.Int(int(in.MessageNotifications))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel_id\":")
	out.String(string(in.ChannelID))
	out.RawByte('}')
}
func (v UserGuildSettingsChannelOverride) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_UserGuildSettingsChannelOverride(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v UserGuildSettingsChannelOverride) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_UserGuildSettingsChannelOverride(w, v)
}
func (v *UserGuildSettingsChannelOverride) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_UserGuildSettingsChannelOverride(&r, v)
	return r.Error()
}
func (v *UserGuildSettingsChannelOverride) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_UserGuildSettingsChannelOverride(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildEmojisUpdate(in *jlexer.Lexer, out *GuildEmojisUpdate) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "guild_id":
			out.GuildID = string(in.String())
		case "emojis":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Emojis = make([]*Emoji, 0, 8)
			} else {
				out.Emojis = nil
			}
			for !in.IsDelim(']') {
				var v13 *Emoji
				if in.IsNull() {
					in.Skip()
					v13 = nil
				} else {
					v13 = new(Emoji)
					(*v13).UnmarshalEasyJSON(in)
				}
				out.Emojis = append(out.Emojis, v13)
				in.WantComma()
			}
			in.Delim(']')
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildEmojisUpdate(out *jwriter.Writer, in GuildEmojisUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"guild_id\":")
	out.String(string(in.GuildID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"emojis\":")
	out.RawByte('[')
	for v14, v15 := range in.Emojis {
		if v14 > 0 {
			out.RawByte(',')
		}
		if v15 == nil {
			out.RawString("null")
		} else {
			(*v15).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	out.RawByte('}')
}
func (v GuildEmojisUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildEmojisUpdate(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v GuildEmojisUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildEmojisUpdate(w, v)
}
func (v *GuildEmojisUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildEmojisUpdate(&r, v)
	return r.Error()
}
func (v *GuildEmojisUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildEmojisUpdate(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildBan(in *jlexer.Lexer, out *GuildBan) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				out.User = new(User)
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "guild_id":
			out.GuildID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildBan(out *jwriter.Writer, in GuildBan) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	if in.User == nil {
		out.RawString("null")
	} else {
		(*in.User).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"guild_id\":")
	out.String(string(in.GuildID))
	out.RawByte('}')
}
func (v GuildBan) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildBan(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v GuildBan) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildBan(w, v)
}
func (v *GuildBan) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildBan(&r, v)
	return r.Error()
}
func (v *GuildBan) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildBan(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildRoleDelete(in *jlexer.Lexer, out *GuildRoleDelete) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "role_id":
			out.RoleID = string(in.String())
		case "guild_id":
			out.GuildID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildRoleDelete(out *jwriter.Writer, in GuildRoleDelete) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"role_id\":")
	out.String(string(in.RoleID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"guild_id\":")
	out.String(string(in.GuildID))
	out.RawByte('}')
}
func (v GuildRoleDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildRoleDelete(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v GuildRoleDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildRoleDelete(w, v)
}
func (v *GuildRoleDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildRoleDelete(&r, v)
	return r.Error()
}
func (v *GuildRoleDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildRoleDelete(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildRole(in *jlexer.Lexer, out *GuildRole) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "role":
			if in.IsNull() {
				in.Skip()
				out.Role = nil
			} else {
				out.Role = new(Role)
				(*out.Role).UnmarshalEasyJSON(in)
			}
		case "guild_id":
			out.GuildID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildRole(out *jwriter.Writer, in GuildRole) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"role\":")
	if in.Role == nil {
		out.RawString("null")
	} else {
		(*in.Role).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"guild_id\":")
	out.String(string(in.GuildID))
	out.RawByte('}')
}
func (v GuildRole) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildRole(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v GuildRole) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildRole(w, v)
}
func (v *GuildRole) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildRole(&r, v)
	return r.Error()
}
func (v *GuildRole) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildRole(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildIntegrationsUpdate(in *jlexer.Lexer, out *GuildIntegrationsUpdate) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "guild_id":
			out.GuildID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildIntegrationsUpdate(out *jwriter.Writer, in GuildIntegrationsUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"guild_id\":")
	out.String(string(in.GuildID))
	out.RawByte('}')
}
func (v GuildIntegrationsUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildIntegrationsUpdate(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v GuildIntegrationsUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildIntegrationsUpdate(w, v)
}
func (v *GuildIntegrationsUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildIntegrationsUpdate(&r, v)
	return r.Error()
}
func (v *GuildIntegrationsUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildIntegrationsUpdate(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_MessageAck(in *jlexer.Lexer, out *MessageAck) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message_id":
			out.MessageID = string(in.String())
		case "channel_id":
			out.ChannelID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_MessageAck(out *jwriter.Writer, in MessageAck) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message_id\":")
	out.String(string(in.MessageID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel_id\":")
	out.String(string(in.ChannelID))
	out.RawByte('}')
}
func (v MessageAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_MessageAck(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v MessageAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_MessageAck(w, v)
}
func (v *MessageAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_MessageAck(&r, v)
	return r.Error()
}
func (v *MessageAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_MessageAck(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_PresenceUpdate(in *jlexer.Lexer, out *PresenceUpdate) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "guild_id":
			out.GuildID = string(in.String())
		case "roles":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Roles = make([]string, 0, 4)
			} else {
				out.Roles = nil
			}
			for !in.IsDelim(']') {
				var v16 string
				v16 = string(in.String())
				out.Roles = append(out.Roles, v16)
				in.WantComma()
			}
			in.Delim(']')
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				out.User = new(User)
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "game":
			if in.IsNull() {
				in.Skip()
				out.Game = nil
			} else {
				out.Game = new(Game)
				(*out.Game).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_PresenceUpdate(out *jwriter.Writer, in PresenceUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"status\":")
	out.String(string(in.Status))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"guild_id\":")
	out.String(string(in.GuildID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"roles\":")
	out.RawByte('[')
	for v17, v18 := range in.Roles {
		if v17 > 0 {
			out.RawByte(',')
		}
		out.String(string(v18))
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	if in.User == nil {
		out.RawString("null")
	} else {
		(*in.User).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"game\":")
	if in.Game == nil {
		out.RawString("null")
	} else {
		(*in.Game).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func (v PresenceUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_PresenceUpdate(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v PresenceUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_PresenceUpdate(w, v)
}
func (v *PresenceUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_PresenceUpdate(&r, v)
	return r.Error()
}
func (v *PresenceUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_PresenceUpdate(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_TypingStart(in *jlexer.Lexer, out *TypingStart) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = string(in.String())
		case "channel_id":
			out.ChannelID = string(in.String())
		case "timestamp":
			out.Timestamp = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_TypingStart(out *jwriter.Writer, in TypingStart) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user_id\":")
	out.String(string(in.UserID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel_id\":")
	out.String(string(in.ChannelID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timestamp\":")
	out.Int(int(in.Timestamp))
	out.RawByte('}')
}
func (v TypingStart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_TypingStart(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v TypingStart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_TypingStart(w, v)
}
func (v *TypingStart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_TypingStart(&r, v)
	return r.Error()
}
func (v *TypingStart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_TypingStart(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_ReadState(in *jlexer.Lexer, out *ReadState) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mention_count":
			out.MentionCount = int(in.Int())
		case "last_message_id":
			out.LastMessageID = string(in.String())
		case "id":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_ReadState(out *jwriter.Writer, in ReadState) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mention_count\":")
	out.Int(int(in.MentionCount))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"last_message_id\":")
	out.String(string(in.LastMessageID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	out.RawByte('}')
}
func (v ReadState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_ReadState(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v ReadState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_ReadState(w, v)
}
func (v *ReadState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_ReadState(&r, v)
	return r.Error()
}
func (v *ReadState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_ReadState(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_RateLimit(in *jlexer.Lexer, out *RateLimit) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bucket":
			out.Bucket = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "retry_after":
			out.RetryAfter = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_RateLimit(out *jwriter.Writer, in RateLimit) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bucket\":")
	out.String(string(in.Bucket))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message\":")
	out.String(string(in.Message))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"retry_after\":")
	out.Int64(int64(in.RetryAfter))
	out.RawByte('}')
}
func (v RateLimit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_RateLimit(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v RateLimit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_RateLimit(w, v)
}
func (v *RateLimit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_RateLimit(&r, v)
	return r.Error()
}
func (v *RateLimit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_RateLimit(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Ready(in *jlexer.Lexer, out *Ready) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "v":
			out.Version = int(in.Int())
		case "session_id":
			out.SessionID = string(in.String())
		case "heartbeat_interval":
			out.HeartbeatInterval = uint(in.Uint())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				out.User = new(User)
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "read_state":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.ReadState = make([]*ReadState, 0, 8)
			} else {
				out.ReadState = nil
			}
			for !in.IsDelim(']') {
				var v19 *ReadState
				if in.IsNull() {
					in.Skip()
					v19 = nil
				} else {
					v19 = new(ReadState)
					(*v19).UnmarshalEasyJSON(in)
				}
				out.ReadState = append(out.ReadState, v19)
				in.WantComma()
			}
			in.Delim(']')
		case "private_channels":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.PrivateChannels = make([]*Channel, 0, 8)
			} else {
				out.PrivateChannels = nil
			}
			for !in.IsDelim(']') {
				var v20 *Channel
				if in.IsNull() {
					in.Skip()
					v20 = nil
				} else {
					v20 = new(Channel)
					(*v20).UnmarshalEasyJSON(in)
				}
				out.PrivateChannels = append(out.PrivateChannels, v20)
				in.WantComma()
			}
			in.Delim(']')
		case "guilds":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Guilds = make([]*Guild, 0, 8)
			} else {
				out.Guilds = nil
			}
			for !in.IsDelim(']') {
				var v21 *Guild
				if in.IsNull() {
					in.Skip()
					v21 = nil
				} else {
					v21 = new(Guild)
					(*v21).UnmarshalEasyJSON(in)
				}
				out.Guilds = append(out.Guilds, v21)
				in.WantComma()
			}
			in.Delim(']')
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Ready(out *jwriter.Writer, in Ready) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"v\":")
	out.Int(int(in.Version))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"session_id\":")
	out.String(string(in.SessionID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"heartbeat_interval\":")
	out.Uint(uint(in.HeartbeatInterval))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	if in.User == nil {
		out.RawString("null")
	} else {
		(*in.User).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"read_state\":")
	out.RawByte('[')
	for v22, v23 := range in.ReadState {
		if v22 > 0 {
			out.RawByte(',')
		}
		if v23 == nil {
			out.RawString("null")
		} else {
			(*v23).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"private_channels\":")
	out.RawByte('[')
	for v24, v25 := range in.PrivateChannels {
		if v24 > 0 {
			out.RawByte(',')
		}
		if v25 == nil {
			out.RawString("null")
		} else {
			(*v25).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"guilds\":")
	out.RawByte('[')
	for v26, v27 := range in.Guilds {
		if v26 > 0 {
			out.RawByte(',')
		}
		if v27 == nil {
			out.RawString("null")
		} else {
			(*v27).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	out.RawByte('}')
}
func (v Ready) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Ready(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Ready) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Ready(w, v)
}
func (v *Ready) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Ready(&r, v)
	return r.Error()
}
func (v *Ready) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Ready(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Event(in *jlexer.Lexer, out *Event) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "t":
			out.Type = string(in.String())
		case "s":
			out.State = int(in.Int())
		case "op":
			out.Operation = int(in.Int())
		case "dir":
			out.Direction = int(in.Int())
		case "d":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RawData).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Event(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"t\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"s\":")
	out.Int(int(in.State))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"op\":")
	out.Int(int(in.Operation))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"dir\":")
	out.Int(int(in.Direction))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"d\":")
	out.Raw((in.RawData).MarshalJSON())
	out.RawByte('}')
}
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Event(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Event(w, v)
}
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Event(&r, v)
	return r.Error()
}
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Event(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Settings(in *jlexer.Lexer, out *Settings) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "render_embeds":
			out.RenderEmbeds = bool(in.Bool())
		case "inline_embed_media":
			out.InlineEmbedMedia = bool(in.Bool())
		case "enable_tts_command":
			out.EnableTtsCommand = bool(in.Bool())
		case "message_display_compact":
			out.MessageDisplayCompact = bool(in.Bool())
		case "show_current_game":
			out.ShowCurrentGame = bool(in.Bool())
		case "locale":
			out.Locale = string(in.String())
		case "theme":
			out.Theme = string(in.String())
		case "muted_channels":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.MutedChannels = make([]string, 0, 4)
			} else {
				out.MutedChannels = nil
			}
			for !in.IsDelim(']') {
				var v28 string
				v28 = string(in.String())
				out.MutedChannels = append(out.MutedChannels, v28)
				in.WantComma()
			}
			in.Delim(']')
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Settings(out *jwriter.Writer, in Settings) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"render_embeds\":")
	out.Bool(bool(in.RenderEmbeds))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"inline_embed_media\":")
	out.Bool(bool(in.InlineEmbedMedia))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"enable_tts_command\":")
	out.Bool(bool(in.EnableTtsCommand))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message_display_compact\":")
	out.Bool(bool(in.MessageDisplayCompact))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"show_current_game\":")
	out.Bool(bool(in.ShowCurrentGame))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"locale\":")
	out.String(string(in.Locale))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"theme\":")
	out.String(string(in.Theme))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"muted_channels\":")
	out.RawByte('[')
	for v29, v30 := range in.MutedChannels {
		if v29 > 0 {
			out.RawByte(',')
		}
		out.String(string(v30))
	}
	out.RawByte(']')
	out.RawByte('}')
}
func (v Settings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Settings(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Settings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Settings(w, v)
}
func (v *Settings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Settings(&r, v)
	return r.Error()
}
func (v *Settings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Settings(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_User(in *jlexer.Lexer, out *User) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "Avatar":
			out.Avatar = string(in.String())
		case "discriminator":
			out.Discriminator = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "verified":
			out.Verified = bool(in.Bool())
		case "bot":
			out.Bot = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_User(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"email\":")
	out.String(string(in.Email))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"username\":")
	out.String(string(in.Username))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Avatar\":")
	out.String(string(in.Avatar))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"discriminator\":")
	out.String(string(in.Discriminator))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"token\":")
	out.String(string(in.Token))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"verified\":")
	out.Bool(bool(in.Verified))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bot\":")
	out.Bool(bool(in.Bot))
	out.RawByte('}')
}
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_User(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_User(w, v)
}
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_User(&r, v)
	return r.Error()
}
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_User(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Member(in *jlexer.Lexer, out *Member) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "guild_id":
			out.GuildID = string(in.String())
		case "joined_at":
			out.JoinedAt = string(in.String())
		case "deaf":
			out.Deaf = bool(in.Bool())
		case "mute":
			out.Mute = bool(in.Bool())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				out.User = new(User)
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "roles":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Roles = make([]string, 0, 4)
			} else {
				out.Roles = nil
			}
			for !in.IsDelim(']') {
				var v31 string
				v31 = string(in.String())
				out.Roles = append(out.Roles, v31)
				in.WantComma()
			}
			in.Delim(']')
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Member(out *jwriter.Writer, in Member) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"guild_id\":")
	out.String(string(in.GuildID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"joined_at\":")
	out.String(string(in.JoinedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"deaf\":")
	out.Bool(bool(in.Deaf))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mute\":")
	out.Bool(bool(in.Mute))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	if in.User == nil {
		out.RawString("null")
	} else {
		(*in.User).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"roles\":")
	out.RawByte('[')
	for v32, v33 := range in.Roles {
		if v32 > 0 {
			out.RawByte(',')
		}
		out.String(string(v33))
	}
	out.RawByte(']')
	out.RawByte('}')
}
func (v Member) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Member(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Member) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Member(w, v)
}
func (v *Member) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Member(&r, v)
	return r.Error()
}
func (v *Member) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Member(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Game(in *jlexer.Lexer, out *Game) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Game(out *jwriter.Writer, in Game) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	out.RawByte('}')
}
func (v Game) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Game(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Game) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Game(w, v)
}
func (v *Game) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Game(&r, v)
	return r.Error()
}
func (v *Game) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Game(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Presence(in *jlexer.Lexer, out *Presence) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				out.User = new(User)
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "status":
			out.Status = string(in.String())
		case "game":
			if in.IsNull() {
				in.Skip()
				out.Game = nil
			} else {
				out.Game = new(Game)
				(*out.Game).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Presence(out *jwriter.Writer, in Presence) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	if in.User == nil {
		out.RawString("null")
	} else {
		(*in.User).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"status\":")
	out.String(string(in.Status))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"game\":")
	if in.Game == nil {
		out.RawString("null")
	} else {
		(*in.Game).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func (v Presence) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Presence(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Presence) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Presence(w, v)
}
func (v *Presence) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Presence(&r, v)
	return r.Error()
}
func (v *Presence) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Presence(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_VoiceState(in *jlexer.Lexer, out *VoiceState) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = string(in.String())
		case "session_id":
			out.SessionID = string(in.String())
		case "channel_id":
			out.ChannelID = string(in.String())
		case "guild_id":
			out.GuildID = string(in.String())
		case "suppress":
			out.Suppress = bool(in.Bool())
		case "self_mute":
			out.SelfMute = bool(in.Bool())
		case "self_deaf":
			out.SelfDeaf = bool(in.Bool())
		case "mute":
			out.Mute = bool(in.Bool())
		case "deaf":
			out.Deaf = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_VoiceState(out *jwriter.Writer, in VoiceState) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user_id\":")
	out.String(string(in.UserID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"session_id\":")
	out.String(string(in.SessionID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel_id\":")
	out.String(string(in.ChannelID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"guild_id\":")
	out.String(string(in.GuildID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"suppress\":")
	out.Bool(bool(in.Suppress))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"self_mute\":")
	out.Bool(bool(in.SelfMute))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"self_deaf\":")
	out.Bool(bool(in.SelfDeaf))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mute\":")
	out.Bool(bool(in.Mute))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"deaf\":")
	out.Bool(bool(in.Deaf))
	out.RawByte('}')
}
func (v VoiceState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_VoiceState(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v VoiceState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_VoiceState(w, v)
}
func (v *VoiceState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_VoiceState(&r, v)
	return r.Error()
}
func (v *VoiceState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_VoiceState(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Role(in *jlexer.Lexer, out *Role) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "managed":
			out.Managed = bool(in.Bool())
		case "hoist":
			out.Hoist = bool(in.Bool())
		case "color":
			out.Color = int(in.Int())
		case "position":
			out.Position = int(in.Int())
		case "permissions":
			out.Permissions = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Role(out *jwriter.Writer, in Role) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"managed\":")
	out.Bool(bool(in.Managed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hoist\":")
	out.Bool(bool(in.Hoist))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"color\":")
	out.Int(int(in.Color))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"position\":")
	out.Int(int(in.Position))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"permissions\":")
	out.Int(int(in.Permissions))
	out.RawByte('}')
}
func (v Role) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Role(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Role) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Role(w, v)
}
func (v *Role) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Role(&r, v)
	return r.Error()
}
func (v *Role) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Role(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildParams(in *jlexer.Lexer, out *GuildParams) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "verification_level":
			if in.IsNull() {
				in.Skip()
				out.VerificationLevel = nil
			} else {
				out.VerificationLevel = new(VerificationLevel)
				*out.VerificationLevel = VerificationLevel(in.Int())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildParams(out *jwriter.Writer, in GuildParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"region\":")
	out.String(string(in.Region))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"verification_level\":")
	if in.VerificationLevel == nil {
		out.RawString("null")
	} else {
		out.Int(int(*in.VerificationLevel))
	}
	out.RawByte('}')
}
func (v GuildParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildParams(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v GuildParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_GuildParams(w, v)
}
func (v *GuildParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildParams(&r, v)
	return r.Error()
}
func (v *GuildParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_GuildParams(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Guild(in *jlexer.Lexer, out *Guild) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "afk_channel_id":
			out.AfkChannelID = string(in.String())
		case "embed_channel_id":
			out.EmbedChannelID = string(in.String())
		case "owner_id":
			out.OwnerID = string(in.String())
		case "joined_at":
			out.JoinedAt = string(in.String())
		case "splash":
			out.Splash = string(in.String())
		case "afk_timeout":
			out.AfkTimeout = int(in.Int())
		case "verification_level":
			out.VerificationLevel = VerificationLevel(in.Int())
		case "embed_enabled":
			out.EmbedEnabled = bool(in.Bool())
		case "large":
			out.Large = bool(in.Bool())
		case "roles":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Roles = make([]*Role, 0, 8)
			} else {
				out.Roles = nil
			}
			for !in.IsDelim(']') {
				var v34 *Role
				if in.IsNull() {
					in.Skip()
					v34 = nil
				} else {
					v34 = new(Role)
					(*v34).UnmarshalEasyJSON(in)
				}
				out.Roles = append(out.Roles, v34)
				in.WantComma()
			}
			in.Delim(']')
		case "emojis":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Emojis = make([]*Emoji, 0, 8)
			} else {
				out.Emojis = nil
			}
			for !in.IsDelim(']') {
				var v35 *Emoji
				if in.IsNull() {
					in.Skip()
					v35 = nil
				} else {
					v35 = new(Emoji)
					(*v35).UnmarshalEasyJSON(in)
				}
				out.Emojis = append(out.Emojis, v35)
				in.WantComma()
			}
			in.Delim(']')
		case "members":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Members = make([]*Member, 0, 8)
			} else {
				out.Members = nil
			}
			for !in.IsDelim(']') {
				var v36 *Member
				if in.IsNull() {
					in.Skip()
					v36 = nil
				} else {
					v36 = new(Member)
					(*v36).UnmarshalEasyJSON(in)
				}
				out.Members = append(out.Members, v36)
				in.WantComma()
			}
			in.Delim(']')
		case "presences":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Presences = make([]*Presence, 0, 8)
			} else {
				out.Presences = nil
			}
			for !in.IsDelim(']') {
				var v37 *Presence
				if in.IsNull() {
					in.Skip()
					v37 = nil
				} else {
					v37 = new(Presence)
					(*v37).UnmarshalEasyJSON(in)
				}
				out.Presences = append(out.Presences, v37)
				in.WantComma()
			}
			in.Delim(']')
		case "channels":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Channels = make([]*Channel, 0, 8)
			} else {
				out.Channels = nil
			}
			for !in.IsDelim(']') {
				var v38 *Channel
				if in.IsNull() {
					in.Skip()
					v38 = nil
				} else {
					v38 = new(Channel)
					(*v38).UnmarshalEasyJSON(in)
				}
				out.Channels = append(out.Channels, v38)
				in.WantComma()
			}
			in.Delim(']')
		case "voice_states":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.VoiceStates = make([]*VoiceState, 0, 8)
			} else {
				out.VoiceStates = nil
			}
			for !in.IsDelim(']') {
				var v39 *VoiceState
				if in.IsNull() {
					in.Skip()
					v39 = nil
				} else {
					v39 = new(VoiceState)
					(*v39).UnmarshalEasyJSON(in)
				}
				out.VoiceStates = append(out.VoiceStates, v39)
				in.WantComma()
			}
			in.Delim(']')
		case "unavailable":
			if in.IsNull() {
				in.Skip()
				out.Unavailable = nil
			} else {
				out.Unavailable = new(bool)
				*out.Unavailable = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Guild(out *jwriter.Writer, in Guild) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"icon\":")
	out.String(string(in.Icon))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"region\":")
	out.String(string(in.Region))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"afk_channel_id\":")
	out.String(string(in.AfkChannelID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"embed_channel_id\":")
	out.String(string(in.EmbedChannelID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"owner_id\":")
	out.String(string(in.OwnerID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"joined_at\":")
	out.String(string(in.JoinedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"splash\":")
	out.String(string(in.Splash))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"afk_timeout\":")
	out.Int(int(in.AfkTimeout))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"verification_level\":")
	out.Int(int(in.VerificationLevel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"embed_enabled\":")
	out.Bool(bool(in.EmbedEnabled))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"large\":")
	out.Bool(bool(in.Large))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"roles\":")
	out.RawByte('[')
	for v40, v41 := range in.Roles {
		if v40 > 0 {
			out.RawByte(',')
		}
		if v41 == nil {
			out.RawString("null")
		} else {
			(*v41).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"emojis\":")
	out.RawByte('[')
	for v42, v43 := range in.Emojis {
		if v42 > 0 {
			out.RawByte(',')
		}
		if v43 == nil {
			out.RawString("null")
		} else {
			(*v43).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"members\":")
	out.RawByte('[')
	for v44, v45 := range in.Members {
		if v44 > 0 {
			out.RawByte(',')
		}
		if v45 == nil {
			out.RawString("null")
		} else {
			(*v45).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"presences\":")
	out.RawByte('[')
	for v46, v47 := range in.Presences {
		if v46 > 0 {
			out.RawByte(',')
		}
		if v47 == nil {
			out.RawString("null")
		} else {
			(*v47).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channels\":")
	out.RawByte('[')
	for v48, v49 := range in.Channels {
		if v48 > 0 {
			out.RawByte(',')
		}
		if v49 == nil {
			out.RawString("null")
		} else {
			(*v49).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"voice_states\":")
	out.RawByte('[')
	for v50, v51 := range in.VoiceStates {
		if v50 > 0 {
			out.RawByte(',')
		}
		if v51 == nil {
			out.RawString("null")
		} else {
			(*v51).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"unavailable\":")
	if in.Unavailable == nil {
		out.RawString("null")
	} else {
		out.Bool(bool(*in.Unavailable))
	}
	out.RawByte('}')
}
func (v Guild) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Guild(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Guild) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Guild(w, v)
}
func (v *Guild) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Guild(&r, v)
	return r.Error()
}
func (v *Guild) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Guild(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Emoji(in *jlexer.Lexer, out *Emoji) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "roles":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Roles = make([]string, 0, 4)
			} else {
				out.Roles = nil
			}
			for !in.IsDelim(']') {
				var v52 string
				v52 = string(in.String())
				out.Roles = append(out.Roles, v52)
				in.WantComma()
			}
			in.Delim(']')
		case "managed":
			out.Managed = bool(in.Bool())
		case "require_colons":
			out.RequireColons = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Emoji(out *jwriter.Writer, in Emoji) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"roles\":")
	out.RawByte('[')
	for v53, v54 := range in.Roles {
		if v53 > 0 {
			out.RawByte(',')
		}
		out.String(string(v54))
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"managed\":")
	out.Bool(bool(in.Managed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"require_colons\":")
	out.Bool(bool(in.RequireColons))
	out.RawByte('}')
}
func (v Emoji) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Emoji(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Emoji) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Emoji(w, v)
}
func (v *Emoji) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Emoji(&r, v)
	return r.Error()
}
func (v *Emoji) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Emoji(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_PermissionOverwrite(in *jlexer.Lexer, out *PermissionOverwrite) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "deny":
			out.Deny = int(in.Int())
		case "allow":
			out.Allow = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_PermissionOverwrite(out *jwriter.Writer, in PermissionOverwrite) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"deny\":")
	out.Int(int(in.Deny))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"allow\":")
	out.Int(int(in.Allow))
	out.RawByte('}')
}
func (v PermissionOverwrite) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_PermissionOverwrite(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v PermissionOverwrite) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_PermissionOverwrite(w, v)
}
func (v *PermissionOverwrite) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_PermissionOverwrite(&r, v)
	return r.Error()
}
func (v *PermissionOverwrite) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_PermissionOverwrite(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Channel(in *jlexer.Lexer, out *Channel) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "guild_id":
			out.GuildID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "topic":
			out.Topic = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "last_message_id":
			out.LastMessageID = string(in.String())
		case "position":
			out.Position = int(in.Int())
		case "bitrate":
			out.Bitrate = int(in.Int())
		case "is_private":
			out.IsPrivate = bool(in.Bool())
		case "recipient":
			if in.IsNull() {
				in.Skip()
				out.Recipient = nil
			} else {
				out.Recipient = new(User)
				(*out.Recipient).UnmarshalEasyJSON(in)
			}
		case "permission_overwrites":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.PermissionOverwrites = make([]*PermissionOverwrite, 0, 8)
			} else {
				out.PermissionOverwrites = nil
			}
			for !in.IsDelim(']') {
				var v55 *PermissionOverwrite
				if in.IsNull() {
					in.Skip()
					v55 = nil
				} else {
					v55 = new(PermissionOverwrite)
					(*v55).UnmarshalEasyJSON(in)
				}
				out.PermissionOverwrites = append(out.PermissionOverwrites, v55)
				in.WantComma()
			}
			in.Delim(']')
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Channel(out *jwriter.Writer, in Channel) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"guild_id\":")
	out.String(string(in.GuildID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"topic\":")
	out.String(string(in.Topic))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"last_message_id\":")
	out.String(string(in.LastMessageID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"position\":")
	out.Int(int(in.Position))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bitrate\":")
	out.Int(int(in.Bitrate))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"is_private\":")
	out.Bool(bool(in.IsPrivate))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"recipient\":")
	if in.Recipient == nil {
		out.RawString("null")
	} else {
		(*in.Recipient).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"permission_overwrites\":")
	out.RawByte('[')
	for v56, v57 := range in.PermissionOverwrites {
		if v56 > 0 {
			out.RawByte(',')
		}
		if v57 == nil {
			out.RawString("null")
		} else {
			(*v57).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	out.RawByte('}')
}
func (v Channel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Channel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Channel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Channel(w, v)
}
func (v *Channel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Channel(&r, v)
	return r.Error()
}
func (v *Channel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Channel(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Invite(in *jlexer.Lexer, out *Invite) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "guild":
			if in.IsNull() {
				in.Skip()
				out.Guild = nil
			} else {
				out.Guild = new(Guild)
				(*out.Guild).UnmarshalEasyJSON(in)
			}
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				out.Channel = new(Channel)
				(*out.Channel).UnmarshalEasyJSON(in)
			}
		case "inviter":
			if in.IsNull() {
				in.Skip()
				out.Inviter = nil
			} else {
				out.Inviter = new(User)
				(*out.Inviter).UnmarshalEasyJSON(in)
			}
		case "code":
			out.Code = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "max_age":
			out.MaxAge = int(in.Int())
		case "uses":
			out.Uses = int(in.Int())
		case "max_uses":
			out.MaxUses = int(in.Int())
		case "xkcdpass":
			out.XkcdPass = bool(in.Bool())
		case "revoked":
			out.Revoked = bool(in.Bool())
		case "temporary":
			out.Temporary = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Invite(out *jwriter.Writer, in Invite) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"guild\":")
	if in.Guild == nil {
		out.RawString("null")
	} else {
		(*in.Guild).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel\":")
	if in.Channel == nil {
		out.RawString("null")
	} else {
		(*in.Channel).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"inviter\":")
	if in.Inviter == nil {
		out.RawString("null")
	} else {
		(*in.Inviter).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"code\":")
	out.String(string(in.Code))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"created_at\":")
	out.String(string(in.CreatedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"max_age\":")
	out.Int(int(in.MaxAge))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uses\":")
	out.Int(int(in.Uses))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"max_uses\":")
	out.Int(int(in.MaxUses))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"xkcdpass\":")
	out.Bool(bool(in.XkcdPass))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"revoked\":")
	out.Bool(bool(in.Revoked))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"temporary\":")
	out.Bool(bool(in.Temporary))
	out.RawByte('}')
}
func (v Invite) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Invite(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Invite) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_Invite(w, v)
}
func (v *Invite) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Invite(&r, v)
	return r.Error()
}
func (v *Invite) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_Invite(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_ICEServer(in *jlexer.Lexer, out *ICEServer) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "credential":
			out.Credential = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_ICEServer(out *jwriter.Writer, in ICEServer) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"url\":")
	out.String(string(in.URL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"username\":")
	out.String(string(in.Username))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"credential\":")
	out.String(string(in.Credential))
	out.RawByte('}')
}
func (v ICEServer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_ICEServer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v ICEServer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_ICEServer(w, v)
}
func (v *ICEServer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_ICEServer(&r, v)
	return r.Error()
}
func (v *ICEServer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_ICEServer(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_VoiceICE(in *jlexer.Lexer, out *VoiceICE) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ttl":
			out.TTL = string(in.String())
		case "servers":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Servers = make([]*ICEServer, 0, 8)
			} else {
				out.Servers = nil
			}
			for !in.IsDelim(']') {
				var v58 *ICEServer
				if in.IsNull() {
					in.Skip()
					v58 = nil
				} else {
					v58 = new(ICEServer)
					(*v58).UnmarshalEasyJSON(in)
				}
				out.Servers = append(out.Servers, v58)
				in.WantComma()
			}
			in.Delim(']')
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_VoiceICE(out *jwriter.Writer, in VoiceICE) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ttl\":")
	out.String(string(in.TTL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"servers\":")
	out.RawByte('[')
	for v59, v60 := range in.Servers {
		if v59 > 0 {
			out.RawByte(',')
		}
		if v60 == nil {
			out.RawString("null")
		} else {
			(*v60).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	out.RawByte('}')
}
func (v VoiceICE) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_VoiceICE(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v VoiceICE) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_VoiceICE(w, v)
}
func (v *VoiceICE) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_VoiceICE(&r, v)
	return r.Error()
}
func (v *VoiceICE) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_VoiceICE(l, v)
}
func easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_VoiceRegion(in *jlexer.Lexer, out *VoiceRegion) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "sample_hostname":
			out.Hostname = string(in.String())
		case "sample_port":
			out.Port = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_VoiceRegion(out *jwriter.Writer, in VoiceRegion) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sample_hostname\":")
	out.String(string(in.Hostname))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sample_port\":")
	out.Int(int(in.Port))
	out.RawByte('}')
}
func (v VoiceRegion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_VoiceRegion(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v VoiceRegion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_d2b7633e_encode_github_com_WatchBeam_cord_model_VoiceRegion(w, v)
}
func (v *VoiceRegion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_VoiceRegion(&r, v)
	return r.Error()
}
func (v *VoiceRegion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_d2b7633e_decode_github_com_WatchBeam_cord_model_VoiceRegion(l, v)
}
