// AUTOGENERATED FILE, DO NOT EDIT
package events

import "github.com/WatchBeam/cord/model"


// ChannelCreate is a handler for CHANNEL_CREATE events.
type ChannelCreate func(update *model.Channel)

var _ Handler = ChannelCreate(func (m *model.Channel) {})

// Name implements Handler.Name
func (p ChannelCreate) Name() string { return "CHANNEL_CREATE" }

// Invoke implements Handler.Invoke
func (p ChannelCreate) Invoke(b []byte) error {
    data := &model.Channel{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// ChannelUpdate is a handler for CHANNEL_UPDATE events.
type ChannelUpdate func(update *model.Channel)

var _ Handler = ChannelUpdate(func (m *model.Channel) {})

// Name implements Handler.Name
func (p ChannelUpdate) Name() string { return "CHANNEL_UPDATE" }

// Invoke implements Handler.Invoke
func (p ChannelUpdate) Invoke(b []byte) error {
    data := &model.Channel{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// ChannelDelete is a handler for CHANNEL_DELETE events.
type ChannelDelete func(update *model.Channel)

var _ Handler = ChannelDelete(func (m *model.Channel) {})

// Name implements Handler.Name
func (p ChannelDelete) Name() string { return "CHANNEL_DELETE" }

// Invoke implements Handler.Invoke
func (p ChannelDelete) Invoke(b []byte) error {
    data := &model.Channel{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// GuildCreate is a handler for GUILD_CREATE events.
type GuildCreate func(update *model.Guild)

var _ Handler = GuildCreate(func (m *model.Guild) {})

// Name implements Handler.Name
func (p GuildCreate) Name() string { return "GUILD_CREATE" }

// Invoke implements Handler.Invoke
func (p GuildCreate) Invoke(b []byte) error {
    data := &model.Guild{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// GuildUpdate is a handler for GUILD_UPDATE events.
type GuildUpdate func(update *model.Guild)

var _ Handler = GuildUpdate(func (m *model.Guild) {})

// Name implements Handler.Name
func (p GuildUpdate) Name() string { return "GUILD_UPDATE" }

// Invoke implements Handler.Invoke
func (p GuildUpdate) Invoke(b []byte) error {
    data := &model.Guild{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// GuildDelete is a handler for GUILD_DELETE events.
type GuildDelete func(update *model.Guild)

var _ Handler = GuildDelete(func (m *model.Guild) {})

// Name implements Handler.Name
func (p GuildDelete) Name() string { return "GUILD_DELETE" }

// Invoke implements Handler.Invoke
func (p GuildDelete) Invoke(b []byte) error {
    data := &model.Guild{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// GuildBanAdd is a handler for GUILD_BAN_ADD events.
type GuildBanAdd func(update *model.Guild)

var _ Handler = GuildBanAdd(func (m *model.Guild) {})

// Name implements Handler.Name
func (p GuildBanAdd) Name() string { return "GUILD_BAN_ADD" }

// Invoke implements Handler.Invoke
func (p GuildBanAdd) Invoke(b []byte) error {
    data := &model.Guild{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// GuildMemberAdd is a handler for GUILD_MEMBER_ADD events.
type GuildMemberAdd func(update *model.Member)

var _ Handler = GuildMemberAdd(func (m *model.Member) {})

// Name implements Handler.Name
func (p GuildMemberAdd) Name() string { return "GUILD_MEMBER_ADD" }

// Invoke implements Handler.Invoke
func (p GuildMemberAdd) Invoke(b []byte) error {
    data := &model.Member{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// GuildMemberUpdate is a handler for GUILD_MEMBER_UPDATE events.
type GuildMemberUpdate func(update *model.Member)

var _ Handler = GuildMemberUpdate(func (m *model.Member) {})

// Name implements Handler.Name
func (p GuildMemberUpdate) Name() string { return "GUILD_MEMBER_UPDATE" }

// Invoke implements Handler.Invoke
func (p GuildMemberUpdate) Invoke(b []byte) error {
    data := &model.Member{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// GuildMemberRemove is a handler for GUILD_MEMBER_REMOVE events.
type GuildMemberRemove func(update *model.Member)

var _ Handler = GuildMemberRemove(func (m *model.Member) {})

// Name implements Handler.Name
func (p GuildMemberRemove) Name() string { return "GUILD_MEMBER_REMOVE" }

// Invoke implements Handler.Invoke
func (p GuildMemberRemove) Invoke(b []byte) error {
    data := &model.Member{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// GuildRoleCreate is a handler for GUILD_ROLE_CREATE events.
type GuildRoleCreate func(update *model.GuildRole)

var _ Handler = GuildRoleCreate(func (m *model.GuildRole) {})

// Name implements Handler.Name
func (p GuildRoleCreate) Name() string { return "GUILD_ROLE_CREATE" }

// Invoke implements Handler.Invoke
func (p GuildRoleCreate) Invoke(b []byte) error {
    data := &model.GuildRole{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// GuildRoleUpdate is a handler for GUILD_ROLE_UPDATE events.
type GuildRoleUpdate func(update *model.GuildRole)

var _ Handler = GuildRoleUpdate(func (m *model.GuildRole) {})

// Name implements Handler.Name
func (p GuildRoleUpdate) Name() string { return "GUILD_ROLE_UPDATE" }

// Invoke implements Handler.Invoke
func (p GuildRoleUpdate) Invoke(b []byte) error {
    data := &model.GuildRole{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// GuildRoleDelete is a handler for GUILD_ROLE_DELETE events.
type GuildRoleDelete func(update *model.GuildRoleDelete)

var _ Handler = GuildRoleDelete(func (m *model.GuildRoleDelete) {})

// Name implements Handler.Name
func (p GuildRoleDelete) Name() string { return "GUILD_ROLE_DELETE" }

// Invoke implements Handler.Invoke
func (p GuildRoleDelete) Invoke(b []byte) error {
    data := &model.GuildRoleDelete{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// GuildIntegrationsUpdate is a handler for GUILD_INTEGRATIONS_UPDATE events.
type GuildIntegrationsUpdate func(update *model.GuildIntegrationsUpdate)

var _ Handler = GuildIntegrationsUpdate(func (m *model.GuildIntegrationsUpdate) {})

// Name implements Handler.Name
func (p GuildIntegrationsUpdate) Name() string { return "GUILD_INTEGRATIONS_UPDATE" }

// Invoke implements Handler.Invoke
func (p GuildIntegrationsUpdate) Invoke(b []byte) error {
    data := &model.GuildIntegrationsUpdate{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// GuildEmojisUpdate is a handler for GUILD_EMOJIS_UPDATE events.
type GuildEmojisUpdate func(update *model.GuildEmojisUpdate)

var _ Handler = GuildEmojisUpdate(func (m *model.GuildEmojisUpdate) {})

// Name implements Handler.Name
func (p GuildEmojisUpdate) Name() string { return "GUILD_EMOJIS_UPDATE" }

// Invoke implements Handler.Invoke
func (p GuildEmojisUpdate) Invoke(b []byte) error {
    data := &model.GuildEmojisUpdate{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// MessageAck is a handler for MESSAGE_ACK events.
type MessageAck func(update *model.MessageAck)

var _ Handler = MessageAck(func (m *model.MessageAck) {})

// Name implements Handler.Name
func (p MessageAck) Name() string { return "MESSAGE_ACK" }

// Invoke implements Handler.Invoke
func (p MessageAck) Invoke(b []byte) error {
    data := &model.MessageAck{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// MessageCreate is a handler for MESSAGE_CREATE events.
type MessageCreate func(update *model.Message)

var _ Handler = MessageCreate(func (m *model.Message) {})

// Name implements Handler.Name
func (p MessageCreate) Name() string { return "MESSAGE_CREATE" }

// Invoke implements Handler.Invoke
func (p MessageCreate) Invoke(b []byte) error {
    data := &model.Message{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// MessageUpdate is a handler for MESSAGE_UPDATE events.
type MessageUpdate func(update *model.Message)

var _ Handler = MessageUpdate(func (m *model.Message) {})

// Name implements Handler.Name
func (p MessageUpdate) Name() string { return "MESSAGE_UPDATE" }

// Invoke implements Handler.Invoke
func (p MessageUpdate) Invoke(b []byte) error {
    data := &model.Message{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// MessageDelete is a handler for MESSAGE_DELETE events.
type MessageDelete func(update *model.Message)

var _ Handler = MessageDelete(func (m *model.Message) {})

// Name implements Handler.Name
func (p MessageDelete) Name() string { return "MESSAGE_DELETE" }

// Invoke implements Handler.Invoke
func (p MessageDelete) Invoke(b []byte) error {
    data := &model.Message{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// PresenceUpdate is a handler for PRESENCE_UPDATE events.
type PresenceUpdate func(update *model.PresenceUpdate)

var _ Handler = PresenceUpdate(func (m *model.PresenceUpdate) {})

// Name implements Handler.Name
func (p PresenceUpdate) Name() string { return "PRESENCE_UPDATE" }

// Invoke implements Handler.Invoke
func (p PresenceUpdate) Invoke(b []byte) error {
    data := &model.PresenceUpdate{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// PresencesReplace is a handler for PRESENCES_REPLACE events.
type PresencesReplace func(update *model.PresencesReplace)

var _ Handler = PresencesReplace(func (m *model.PresencesReplace) {})

// Name implements Handler.Name
func (p PresencesReplace) Name() string { return "PRESENCES_REPLACE" }

// Invoke implements Handler.Invoke
func (p PresencesReplace) Invoke(b []byte) error {
    data := &model.PresencesReplace{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// Ready is a handler for READY events.
type Ready func(update *model.Ready)

var _ Handler = Ready(func (m *model.Ready) {})

// Name implements Handler.Name
func (p Ready) Name() string { return "READY" }

// Invoke implements Handler.Invoke
func (p Ready) Invoke(b []byte) error {
    data := &model.Ready{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// UserUpdate is a handler for USER_UPDATE events.
type UserUpdate func(update *model.User)

var _ Handler = UserUpdate(func (m *model.User) {})

// Name implements Handler.Name
func (p UserUpdate) Name() string { return "USER_UPDATE" }

// Invoke implements Handler.Invoke
func (p UserUpdate) Invoke(b []byte) error {
    data := &model.User{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// UserSettingsUpdate is a handler for USER_SETTINGS_UPDATE events.
type UserSettingsUpdate func(update *model.UserSettingsUpdate)

var _ Handler = UserSettingsUpdate(func (m *model.UserSettingsUpdate) {})

// Name implements Handler.Name
func (p UserSettingsUpdate) Name() string { return "USER_SETTINGS_UPDATE" }

// Invoke implements Handler.Invoke
func (p UserSettingsUpdate) Invoke(b []byte) error {
    data := &model.UserSettingsUpdate{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// UserGuildSettingsUpdate is a handler for USER_GUILD_SETTINGS_UPDATE events.
type UserGuildSettingsUpdate func(update *model.UserGuildSettings)

var _ Handler = UserGuildSettingsUpdate(func (m *model.UserGuildSettings) {})

// Name implements Handler.Name
func (p UserGuildSettingsUpdate) Name() string { return "USER_GUILD_SETTINGS_UPDATE" }

// Invoke implements Handler.Invoke
func (p UserGuildSettingsUpdate) Invoke(b []byte) error {
    data := &model.UserGuildSettings{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// TypingStart is a handler for TYPING_START events.
type TypingStart func(update *model.TypingStart)

var _ Handler = TypingStart(func (m *model.TypingStart) {})

// Name implements Handler.Name
func (p TypingStart) Name() string { return "TYPING_START" }

// Invoke implements Handler.Invoke
func (p TypingStart) Invoke(b []byte) error {
    data := &model.TypingStart{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// VoiceServerUpdate is a handler for VOICE_SERVER_UPDATE events.
type VoiceServerUpdate func(update *model.VoiceServerUpdate)

var _ Handler = VoiceServerUpdate(func (m *model.VoiceServerUpdate) {})

// Name implements Handler.Name
func (p VoiceServerUpdate) Name() string { return "VOICE_SERVER_UPDATE" }

// Invoke implements Handler.Invoke
func (p VoiceServerUpdate) Invoke(b []byte) error {
    data := &model.VoiceServerUpdate{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

// VoiceStateUpdate is a handler for VOICE_STATE_UPDATE events.
type VoiceStateUpdate func(update *model.VoiceState)

var _ Handler = VoiceStateUpdate(func (m *model.VoiceState) {})

// Name implements Handler.Name
func (p VoiceStateUpdate) Name() string { return "VOICE_STATE_UPDATE" }

// Invoke implements Handler.Invoke
func (p VoiceStateUpdate) Invoke(b []byte) error {
    data := &model.VoiceState{}
    if err := data.UnmarshalJSON(b); err != nil {
        return err
    }

    p(data)
    return nil
}

